---
# Configure RabbitMQ for cluster
- name: backup old erlang cookie
  shell: cp -a /var/lib/rabbitmq/.erlang.cookie /var/lib/rabbitmq/.erlang.cookie.old
  changed_when: false

- name: updating rabbitmq erlang cookie
  template:
    src: erlang.cookie.j2
    dest: /var/lib/rabbitmq/.erlang.cookie
    owner: rabbitmq
    group: rabbitmq
    mode: 0400
  notify:
    stop rabbitmq-server

- meta: flush_handlers

- name: remove old erlang cookie
  file:
    path: /var/lib/rabbitmq/.erlang.cookie.old
    state: absent
  changed_when: false
  
  
  # Copy cacert, cert and key file for TLS/SSL
- name: make sure TLS/SSL certificates exists
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: rabbitmq
    mode: 0644
  with_items:
    - { src: "{{ cacertfile }}", dest: "{{ cacertfile_dest }}" }
    - { src: "{{ certfile }}", dest: "{{ certfile_dest }}" }
    - { src: "{{ keyfile }}", dest: "{{ keyfile_dest }}" }
  when: enable_tls
  
- name: rabbitmq default file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { src: etc/default/rabbitmq-server.j2 , dest: /etc/default/rabbitmq-server }
    - { src: etc/rabbitmq/rabbitmq.config.j2, dest: /etc/rabbitmq/rabbitmq.config }
    - { src: etc/rabbitmq/rabbitmq-env.conf.j2, dest: /etc/rabbitmq/rabbitmq-env.conf }
  notify:
    restart rabbitmq-server

- name: Enable the plugins is installed
  rabbitmq_plugin:
    names: "{{ item }}"
    prefix: /usr/lib/rabbitmq
    state: enabled
    new_only: yes
  with_items: "{{ rabbitmq_plugins }}"
  notify:
    restart rabbitmq-server
	
- name: rabbitmq service started and enabled
  service:
    name: rabbitmq-server
    enabled: yes
    state: started
	
- name: make sure rabbitmq server is up
  service:
    name: rabbitmq-server
    state: started

- name: make sure rabbitmq app is up
  command: rabbitmqctl start_app

- name: check if already in cluster
  command: rabbitmqctl cluster_status
  register: cluster_status
  changed_when: false
  
- name: stop rabbitmq app
  command: rabbitmqctl stop_app
  when: cluster_status.stdout.find("rabbit@{{ rabbitmq_cluster_master }}") == -1 and (ansible_fqdn != rabbitmq_cluster_master)

- name: add this node to cluster
  command: rabbitmqctl join_cluster rabbit@{{ rabbitmq_cluster_master }}
  when: cluster_status.stdout.find("rabbit@{{ rabbitmq_cluster_master }}") == -1 and (ansible_fqdn != rabbitmq_cluster_master)

- name: start rabbitmq app
  command: rabbitmqctl start_app
  when: cluster_status.stdout.find("rabbit@{{ rabbitmq_cluster_master }}") == -1 and (ansible_fqdn != rabbitmq_cluster_master)
  
- name: check if ha-mode is already enabled
  shell: rabbitmqctl list_policies
  register: list_policies
  changed_when: false

- name: set ha-mode to exactly two nodes for all queues for backup
  shell: rabbitmqctl set_policy ha-exactly-two ".*" '{"ha-mode":"exactly","ha-params":2,"ha-sync-mode":"automatic"}'
  register: res
  failed_when: res.rc != 0
  when: list_policies.stdout.find("ha-exactly-two") == -1